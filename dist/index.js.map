{"version":3,"sources":["../index.js"],"names":["decoder","devConfig","process","env","DEVELOPMENT_CONFIG","apiaiOptions","hostname","DEVELOPMENT_HOST","path","apiAiService","sessionIds","Map","controller","slackbot","debug","json_file_store","bot","spawn","token","startRTM","numberOfSpots","playersInGame","gameInProgress","isDefined","obj","sendMessage","message","messageText","reply","err","hears","type","user","identity","id","text","indexOf","requestText","decode","replace","channel","botId","userId","has","set","v1","request","textRequest","sessionId","get","contexts","name","parameters","slack_user_id","slack_channel","on","response","result","responseText","fulfillment","speech","responseData","data","action","api","users","info","error","push","setTimeout","arrayContains","shuffle","forEach","username","updateNumberOfGamesPlayed","slack","resp","end","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","storage","userData","save","numberOfGamesPlayed","parseInt","toString","string","getAllPlayersNumberOfGames","all","allUserData"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nimport apiai from 'apiai'\nimport Botkit from 'botkit'\nimport { XmlEntities as Entities } from 'html-entities'\nimport uuid from 'node-uuid'\nimport { apiAiAccessToken, slackBotKey } from './secrets'\n\nconst decoder = new Entities()\n\nconst devConfig = process.env.DEVELOPMENT_CONFIG === 'true'\n\nconst apiaiOptions = {}\nif (devConfig) {\n  apiaiOptions.hostname = process.env.DEVELOPMENT_HOST\n  apiaiOptions.path = '/api/query'\n}\n\nconst apiAiService = apiai(apiAiAccessToken, apiaiOptions)\n\nconst sessionIds = new Map()\n\nconst controller = Botkit.slackbot({\n  debug: false,\n  json_file_store: 'slackbot_storage'\n  // include \"log: false\" to disable logging\n})\n\nlet bot = controller.spawn({\n  token: slackBotKey\n}).startRTM()\n\n// Foos vars\nlet numberOfSpots = 4\nlet playersInGame = []\nlet gameInProgress = false\n\nfunction isDefined (obj) {\n  if (typeof obj === 'undefined') {\n    return false\n  }\n\n  if (!obj) {\n    return false\n  }\n\n  return obj !== null\n}\n\nfunction sendMessage (message, messageText) {\n  try {\n    bot.reply(message, messageText)\n  } catch (err) {\n    bot.reply(message, err.message)\n  }\n}\n\n// Listen for direction messages and all mentions @foos-bot\ncontroller.hears(['.*'], ['direct_message', 'direct_mention', 'mention'], (bot, message) => {\n  try {\n    if (message.type === 'message') {\n      if (message.user === bot.identity.id) {\n        // message from bot can be skipped\n      } else if (message.text.indexOf('<@U') === 0 && message.text.indexOf(bot.identity.id) === -1) {\n        // skip other users direct mentions\n      } else {\n        let requestText = decoder.decode(message.text)\n        requestText = requestText.replace('â€™', '\\'')\n\n        let channel = message.channel\n        let botId = '<@' + bot.identity.id + '>'\n        let userId = message.user\n\n        if (requestText.indexOf(botId) > -1) {\n          requestText = requestText.replace(botId, '')\n        }\n\n        if (!sessionIds.has(channel)) {\n          sessionIds.set(channel, uuid.v1())\n        }\n\n        let request = apiAiService.textRequest(requestText,\n          {\n            sessionId: sessionIds.get(channel),\n            contexts: [\n              {\n                name: 'generic',\n                parameters: {\n                  slack_user_id: userId,\n                  slack_channel: channel\n                }\n              }\n            ]\n          })\n\n        request.on('response', (response) => {\n          if (isDefined(response.result)) {\n            let responseText = response.result.fulfillment.speech\n            let responseData = response.result.fulfillment.data\n            let action = response.result.action\n\n            if (action === 'start_game' || action === 'join_current_game') {\n              // start a new game if there isn't one in progress\n              if (!gameInProgress) {\n                gameInProgress = true\n                numberOfSpots = 3\n                playersInGame = []\n                sendMessage(message, responseText)\n\n                // Add the person who sent the message to the game\n                bot.api.users.info({user: message.user}, (error, response) => {\n                  if (error) {\n                    console.log(error)\n                  }\n                  playersInGame.push(response.user.name)\n\n                  // If user is ed mock him a little\n                  if (response.user.name === 'edwardvincent') {\n                    sendMessage(message, '@edwardvincent Are you sure that is wise? :flushed:')\n                  }\n                })\n\n                // Start the timer - games only last 5 mins\n                setTimeout(function () {\n                  // let users know that time is running out\n                  if (numberOfSpots > 0) {\n                    sendMessage(message, '30 seconds to go and we need ' + numberOfSpots + ' more players... :timer_clock: :timer_clock:')\n                  }\n                  // close game if its been 5 mins and we didn't get enough players\n                  setTimeout(function () {\n                    if (gameInProgress) {\n                      gameInProgress = false\n                      playersInGame = []\n                      sendMessage(message, 'Game closed before we got enough players :cry:')\n                    }\n                  }, 30000)\n                }, 270000)\n              } else { // Join the current game if there is one in progress\n                bot.api.users.info({user: message.user}, (error, response) => {\n                  if (error) {\n                    console.log(error)\n                  }\n                  // Don't let a user join the same game twice\n                  if (arrayContains(response.user.name, playersInGame)) {\n                    sendMessage(message, 'You are already in the game. You can\\'t join twice. :no_entry_sign:')\n                  } else {\n                    numberOfSpots--\n                    playersInGame.push(response.user.name)\n                    if (numberOfSpots > 1) {\n                      sendMessage(message, numberOfSpots + ' more spots to go... :timer_clock:')\n                    } else if (numberOfSpots === 1) {\n                      sendMessage(message, numberOfSpots + ' more spot to go! Ahhhhh!!! :scream_cat:')\n                    } else if (numberOfSpots === 0) {\n                      sendMessage(message, 'Awesome! All spots are filled! :+1:')\n                      gameInProgress = false\n                      shuffle(playersInGame)\n                      sendMessage(message, `Here is a random team assignment if you would like to use it? :foos: ${playersInGame[0]} & ${playersInGame[1]} VS :foos: ${playersInGame[2]} & ${playersInGame[3]}`)\n                      // Save the number of games played to the local db\n                      playersInGame.forEach((username) => {\n                        updateNumberOfGamesPlayed(username)\n                      })\n                    }\n                  }\n                })\n              }\n            } else if (action === 'check_number_of_players_in_game') { // check the number of spots remaining\n              sendMessage(message, 'There are ' + numberOfSpots + ' remaining...')\n            } else if (action === 'get_help') {\n              sendMessage(message, responseText)\n            } else if (isDefined(responseData) && isDefined(responseData.slack)) {\n              try {\n                bot.reply(message, responseData.slack)\n              } catch (err) {\n                bot.reply(message, err.message)\n              }\n            } else if (isDefined(responseText)) {\n              bot.reply(message, responseText, (err, resp) => {\n                if (err) {\n                  console.error(err)\n                }\n              })\n            }\n          }\n        })\n\n        request.on('error', (error) => console.error(error))\n        request.end()\n      }\n    }\n  } catch\n    (err) {\n    console.error(err)\n  }\n})\n\n/**\n * Shuffles an array\n * @param array\n * @returns {*}\n */\nfunction shuffle (array) {\n  let currentIndex = array.length\n  let temporaryValue\n  let randomIndex\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n\n  return array\n}\n\n/**\n * Saves the number of games played to a local db\n * @param username\n */\nfunction updateNumberOfGamesPlayed (username) {\n  controller.storage.users.get(username, function (error, userData) {\n    if (error) {\n      console.log(error)\n    }\n    if (userData) {\n      controller.storage.users.save({\n        id: username,\n        numberOfGamesPlayed: (parseInt(userData.numberOfGamesPlayed, 10) + 1).toString()\n      }, function (err) {\n        if (err) {\n          console.log(err, 'user data not saved')\n        }\n      })\n    } else {\n      controller.storage.users.save({id: username, numberOfGamesPlayed: 1}, function (err) {\n        if (err) {\n          console.log(err, 'user data not saved')\n        }\n      })\n    }\n  })\n}\n\n/**\n * Check if a string is in an array\n * @param string\n * @param array\n * @returns {boolean}\n */\nfunction arrayContains (string, array) {\n  return (array.indexOf(string) > -1)\n}\n\n/**\n * Returns the data about the number of games played for all users\n */\nfunction getAllPlayersNumberOfGames () {\n  controller.storage.users.all(function (error, allUserData) {\n    if (error) {\n      console.log(error)\n    }\n    return allUserData\n  })\n}\n"]}