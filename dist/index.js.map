{"version":3,"sources":["../index.js"],"names":["decoder","devConfig","process","env","DEVELOPMENT_CONFIG","apiaiOptions","hostname","DEVELOPMENT_HOST","path","apiAiService","sessionIds","Map","controller","slackbot","debug","bot","spawn","token","startRTM","numberOfSpots","playersInGame","gameInProgress","isDefined","obj","sendMessage","message","message_text","reply","err","hears","type","user","identity","id","text","indexOf","requestText","decode","replace","channel","messageType","event","botId","userId","console","log","has","set","v1","request","textRequest","sessionId","get","contexts","name","parameters","slack_user_id","slack_channel","on","response","result","responseText","fulfillment","speech","responseData","data","action","setTimeout","slack","api","users","info","error","push","shuffle","resp","end","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport Botkit from \"botkit\";\nimport apiai from \"apiai\";\nimport uuid from \"node-uuid\";\nimport {XmlEntities as Entities} from \"html-entities\";\nimport {apiAiAccessToken, slackBotKey} from './secrets'\n\nconst decoder = new Entities();\n\nconst devConfig = process.env.DEVELOPMENT_CONFIG == 'true';\n\nconst apiaiOptions = {};\nif (devConfig) {\n    apiaiOptions.hostname = process.env.DEVELOPMENT_HOST;\n    apiaiOptions.path = \"/api/query\";\n}\n\nconst apiAiService = apiai(apiAiAccessToken, apiaiOptions);\n\nconst sessionIds = new Map();\n\nconst controller = Botkit.slackbot({\n    debug: false\n    //include \"log: false\" to disable logging\n});\n\nlet bot = controller.spawn({\n    token: slackBotKey\n}).startRTM();\n\n// Foos vars\nlet numberOfSpots = 4;\nlet playersInGame = [];\nlet gameInProgress = false;\n\n\nfunction isDefined(obj) {\n    if (typeof obj == 'undefined') {\n        return false;\n    }\n\n    if (!obj) {\n        return false;\n    }\n\n    return obj != null;\n}\n\nfunction sendMessage(message, message_text) {\n    try {\n        bot.reply(message, message_text);\n    } catch (err) {\n        bot.reply(message, err.message);\n    }\n}\n\n// Listen for direction messages and all mentions @foos-bot\ncontroller.hears(['.*'], ['direct_message', 'direct_mention', 'mention',], (bot, message) => {\n    try {\n        if (message.type == 'message') {\n            if (message.user == bot.identity.id) {\n                // message from bot can be skipped\n            }\n            else if (message.text.indexOf(\"<@U\") == 0 && message.text.indexOf(bot.identity.id) == -1) {\n                // skip other users direct mentions\n            }\n            else {\n\n                let requestText = decoder.decode(message.text);\n                requestText = requestText.replace(\"â€™\", \"'\");\n\n                let channel = message.channel;\n                let messageType = message.event;\n                let botId = '<@' + bot.identity.id + '>';\n                let userId = message.user;\n\n                console.log(requestText);\n                console.log(messageType);\n\n                if (requestText.indexOf(botId) > -1) {\n                    requestText = requestText.replace(botId, '');\n                }\n\n                if (!sessionIds.has(channel)) {\n                    sessionIds.set(channel, uuid.v1());\n                }\n\n                console.log('Start request ', requestText);\n                let request = apiAiService.textRequest(requestText,\n                    {\n                        sessionId: sessionIds.get(channel),\n                        contexts: [\n                            {\n                                name: \"generic\",\n                                parameters: {\n                                    slack_user_id: userId,\n                                    slack_channel: channel\n                                }\n                            }\n                        ]\n                    });\n\n                request.on('response', (response) => {\n                    console.log(response);\n\n                    if (isDefined(response.result)) {\n                        let responseText = response.result.fulfillment.speech;\n                        let responseData = response.result.fulfillment.data;\n                        let action = response.result.action;\n\n                        if (action === \"start_game\") {\n                            // start a new game if there isn't one in progress\n                            // check if there is a game running\n                            if (!gameInProgress) {\n                                setTimeout(function () {\n                                    // let users know that time is running out\n                                    if (numberOfSpots > 0) {\n                                        sendMessage('30 seconds to go and we need ' + numberOfSpots + ' more players...');\n                                    }\n                                    // close game if its been 5 mins and we didn't get enough players\n                                    setTimeout(function () {\n                                        if (gameInProgress) {\n                                            gameInProgress = false;\n                                            sendMessage('Game closed before we got enough players');\n                                        }\n                                    }, 30000);\n                                }, 270000);\n                                gameInProgress = true;\n                                numberOfSpots = 3;\n                                sendMessage(message, responseData.slack);\n\n                                // Add the person who sent the message to the game\n                                bot.api.users.info({user: message.user}, (error, response) => {\n                                    playersInGame.push(response.user.name);\n                                });\n\n                            } else {\n                                sendMessage(message, 'Sorry there is already a game in progress.. Join that one or wait 5 minutes for it to expire..');\n                            }\n                        }\n\n                        // join an existing game\n                        else if (action === \"join_current_game\") {\n                            if (gameInProgress) {\n                                if (numberOfSpots >= 0) {\n                                    numberOfSpots--;\n                                    // Add the person who sent the message to the game\n                                    bot.api.users.info({user: message.user}, (error, response) => {\n                                        playersInGame.push(response.user.name);\n                                        if (numberOfSpots === 0) {\n                                            shuffle(playersInGame);\n                                            sendMessage(message, `Here is a random team assignment if you would like to use it? ${playersInGame[0]} & ${playersInGame[1]} VS ${playersInGame[2]} & ${playersInGame[3]}`);\n                                        }\n                                    });\n                                }\n                                if (numberOfSpots > 1) {\n                                    sendMessage(message, numberOfSpots + ' more spots to go...');\n                                }\n                                else if (numberOfSpots === 1) {\n                                    sendMessage(message, numberOfSpots + ' more spot to go! Ahhhhh!!!');\n                                }\n                                else if (numberOfSpots === 0) {\n                                    sendMessage(message, 'Awesome! All spots are filled!');\n                                    gameInProgress = false;\n                                }\n                                else if (numberOfSpots < 0) {\n                                    sendMessage(message, 'Sorry you are too late but don\\'t worry about it - its only natural selection.');\n                                }\n                            }\n                            else {\n                                sendMessage(message, 'There is no game in progress at the moment. You can send \"@foos-bot I want to foos!\" to start a new game...');\n                            }\n                        }\n\n                        // check the number of spots remaining\n                        else if (action === \"check_number_of_players_in_game\") {\n                            sendMessage(message, 'There are ' + numberOfSpots + ' remaining...');\n                        }\n\n                        // get help\n                        else if (action === \"get_help\") {\n                            sendMessage(message, responseData.slack);\n                        }\n\n                        else if (isDefined(responseData) && isDefined(responseData.slack)) {\n                            try {\n                                bot.reply(message, responseData.slack);\n                            } catch (err) {\n                                bot.reply(message, err.message);\n                            }\n                        } else if (isDefined(responseText)) {\n                            bot.reply(message, responseText, (err, resp) => {\n                                if (err) {\n                                    console.error(err);\n                                }\n                            });\n                        }\n                    }\n\n                });\n\n                request.on('error', (error) => console.error(error));\n                request.end();\n            }\n        }\n    } catch\n        (err) {\n        console.error(err);\n    }\n});\n\nfunction shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}"]}