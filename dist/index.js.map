{"version":3,"sources":["../index.js"],"names":["runWebServer","decoder","devConfig","process","env","DEVELOPMENT_CONFIG","apiaiOptions","hostname","DEVELOPMENT_HOST","path","apiAiService","sessionIds","Map","controller","slackbot","debug","json_file_store","bot","spawn","token","startRTM","numberOfSpots","playersInGame","numberOfChallengeSpots","gameInProgress","edInsults","isDefined","obj","sendMessage","message","messageText","reply","err","hears","type","user","identity","id","text","indexOf","requestText","decode","replace","channel","botId","userId","has","set","v1","request","textRequest","sessionId","get","contexts","name","parameters","slack_user_id","slack_channel","on","response","result","responseText","fulfillment","speech","responseData","data","action","startGame","joinGame","challengeWinners","showLeaderboard","slack","resp","error","end","api","users","info","push","randomInsultIndex","Math","floor","random","length","setTimeout","arrayContains","shuffle","forEach","username","updateNumberOfGamesPlayed","storage","all","allUserData","leaderboardMessage","sortedUserArray","sortByKey","map","index","numberOfGamesPlayed","array","currentIndex","temporaryValue","randomIndex","userData","save","parseInt","toString","string","key","sort","a","b","x","y","readFileSync","createServer","method","processPost","writeHead","listen","callback","queryData","connection","destroy","post","parse"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\r\n\r\nimport apiai from 'apiai'\r\nimport Botkit from 'botkit'\r\nimport fs from 'fs'\r\nimport { XmlEntities as Entities } from 'html-entities'\r\nimport http from 'http'\r\nimport uuid from 'node-uuid'\r\nimport querystring from 'querystring'\r\nimport { apiAiAccessToken, slackBotKey } from './secrets'\r\n\r\n// start the web server\r\nrunWebServer()\r\n\r\nconst decoder = new Entities()\r\n\r\nconst devConfig = process.env.DEVELOPMENT_CONFIG === 'true'\r\n\r\nconst apiaiOptions = {}\r\nif (devConfig) {\r\n  apiaiOptions.hostname = process.env.DEVELOPMENT_HOST\r\n  apiaiOptions.path = '/api/query'\r\n}\r\n\r\nconst apiAiService = apiai(apiAiAccessToken, apiaiOptions)\r\n\r\nconst sessionIds = new Map()\r\n\r\nconst controller = Botkit.slackbot({\r\n  debug: false,\r\n  json_file_store: './slackbot_storage'\r\n  // include \"log: false\" to disable logging\r\n})\r\n\r\nlet bot = controller.spawn({\r\n  token: slackBotKey\r\n}).startRTM()\r\n\r\n// Game variables\r\nlet numberOfSpots = 4\r\nlet playersInGame = []\r\nlet numberOfChallengeSpots = 2\r\nlet gameInProgress = false\r\nlet edInsults = [\r\n  '@edwardvincent Are you sure that is wise? :flushed:',\r\n  '@edwardvincent Are you sure? :flushed:',\r\n  '@edwardvincent Really?!! :flushed:',\r\n  '@edwardvincent When will you learn? :flushed:',\r\n  '@edwardvincent It just makes me sad :cry:'\r\n]\r\n\r\n/**\r\n * Check if defined pollyfil\r\n * @param obj\r\n * @returns {boolean}\r\n */\r\nfunction isDefined (obj) {\r\n  if (typeof obj === 'undefined') {\r\n    return false\r\n  }\r\n\r\n  if (!obj) {\r\n    return false\r\n  }\r\n\r\n  return obj !== null\r\n}\r\n\r\n/**\r\n * Generic function to send slack response\r\n * @param message - object to give the message context\r\n * @param messageText - text that will be sent\r\n */\r\nfunction sendMessage (message, messageText) {\r\n  try {\r\n    bot.reply(message, messageText)\r\n  } catch (err) {\r\n    bot.reply(message, err.message)\r\n  }\r\n}\r\n\r\n/**\r\n * Listen for direction messages and all mentions @foos-bot\r\n * Fire off the correct functions based on the type of request that was made\r\n */\r\ncontroller.hears(['.*'], ['direct_message', 'direct_mention', 'mention'], (bot, message) => {\r\n  try {\r\n    if (message.type === 'message') {\r\n      if (message.user === bot.identity.id) {\r\n        // message from bot can be skipped\r\n      } else if (message.text.indexOf('<@U') === 0 && message.text.indexOf(bot.identity.id) === -1) {\r\n        // skip other users direct mentions\r\n      } else {\r\n        let requestText = decoder.decode(message.text)\r\n        requestText = requestText.replace('’', '\\'')\r\n\r\n        let channel = message.channel\r\n        let botId = '<@' + bot.identity.id + '>'\r\n        let userId = message.user\r\n\r\n        if (requestText.indexOf(botId) > -1) {\r\n          requestText = requestText.replace(botId, '')\r\n        }\r\n\r\n        if (!sessionIds.has(channel)) {\r\n          sessionIds.set(channel, uuid.v1())\r\n        }\r\n\r\n        let request = apiAiService.textRequest(requestText,\r\n          {\r\n            sessionId: sessionIds.get(channel),\r\n            contexts: [\r\n              {\r\n                name: 'generic',\r\n                parameters: {\r\n                  slack_user_id: userId,\r\n                  slack_channel: channel\r\n                }\r\n              }\r\n            ]\r\n          })\r\n\r\n        request.on('response', (response) => {\r\n          if (isDefined(response.result)) {\r\n            let responseText = response.result.fulfillment.speech\r\n            let responseData = response.result.fulfillment.data\r\n            let action = response.result.action\r\n\r\n            if (action === 'start_game' || action === 'join_current_game') {\r\n              // start a new game if there isn't one in progress\r\n              if (!gameInProgress) {\r\n                startGame(message, responseText)\r\n              } else { // Join the current game if there is one in progress\r\n                joinGame(message, responseText)\r\n              }\r\n            } else if (action === 'challenge_winners') { // challenge the winners of the last game\r\n              challengeWinners(message, responseText)\r\n            } else if (action === 'show_leaderboard') { // show who has played the most games\r\n              showLeaderboard(message, responseText)\r\n            } else if (action === 'check_number_of_players_in_game') { // check the number of spots remaining\r\n              sendMessage(message, 'There are ' + numberOfSpots + ' remaining...')\r\n            } else if (action === 'get_help') {\r\n              sendMessage(message, responseText)\r\n            } else if (isDefined(responseData) && isDefined(responseData.slack)) {\r\n              try {\r\n                bot.reply(message, responseData.slack)\r\n              } catch (err) {\r\n                bot.reply(message, err.message)\r\n              }\r\n            } else if (isDefined(responseText)) {\r\n              bot.reply(message, responseText, (err, resp) => {\r\n                if (err) {\r\n                  console.error(err)\r\n                }\r\n              })\r\n            }\r\n          }\r\n        })\r\n\r\n        request.on('error', (error) => console.error(error))\r\n        request.end()\r\n      }\r\n    }\r\n  } catch\r\n    (err) {\r\n    console.error(err)\r\n  }\r\n})\r\n\r\n/**\r\n * Starts a new game\r\n * @param message\r\n * @param responseText\r\n */\r\nfunction startGame (message, responseText) {\r\n  gameInProgress = true\r\n  numberOfSpots = 3\r\n  numberOfChallengeSpots = 2\r\n  playersInGame = []\r\n  sendMessage(message, responseText)\r\n\r\n  // Add the person who sent the message to the game\r\n  bot.api.users.info({user: message.user}, (error, response) => {\r\n    if (error) {\r\n      console.log(error)\r\n    }\r\n    playersInGame.push(response.user.name)\r\n\r\n    // If user is ed mock him a little\r\n    if (response.user.name === 'edwardvincent') {\r\n      let randomInsultIndex = Math.floor(Math.random() * edInsults.length)\r\n      sendMessage(message, edInsults[randomInsultIndex])\r\n    }\r\n  })\r\n\r\n  // Start the timer - games only last 5 mins\r\n  setTimeout(function () {\r\n    // let users know that time is running out\r\n    if (numberOfSpots > 0) {\r\n      sendMessage(message, '30 seconds to go and we need ' + numberOfSpots + ' more players... :timer_clock: :timer_clock:')\r\n    }\r\n    // close game if its been 5 mins and we didn't get enough players\r\n    setTimeout(function () {\r\n      if (gameInProgress) {\r\n        gameInProgress = false\r\n        playersInGame = []\r\n        sendMessage(message, 'Game closed before we got enough players :cry:')\r\n      }\r\n    }, 30000)\r\n  }, 270000)\r\n}\r\n\r\n/**\r\n * Join an existing game\r\n * @param message\r\n * @param responseText\r\n */\r\nfunction joinGame (message, responseText) {\r\n  bot.api.users.info({user: message.user}, (error, response) => {\r\n    if (error) {\r\n      console.log(error)\r\n    }\r\n    // Don't let a user join the same game twice\r\n    if (arrayContains(response.user.name, playersInGame)) {\r\n      sendMessage(message, 'You are already in the game. You can\\'t join twice. :no_entry_sign:')\r\n    } else {\r\n      numberOfSpots--\r\n      playersInGame.push(response.user.name)\r\n      if (numberOfSpots > 1) {\r\n        sendMessage(message, numberOfSpots + ' more spots to go... :timer_clock:')\r\n      } else if (numberOfSpots === 1) {\r\n        sendMessage(message, numberOfSpots + ' more spot to go! Ahhhhh!!! :scream_cat:')\r\n      } else if (numberOfSpots === 0) {\r\n        sendMessage(message, 'Awesome! All spots are filled! :+1:')\r\n        // Wait 30 seconds before allowing a new game to start so that we can catch users who were too slow\r\n        setTimeout(function () {\r\n          if (gameInProgress) {\r\n            gameInProgress = false\r\n          }\r\n        }, 30000)\r\n        shuffle(playersInGame)\r\n        sendMessage(message, `Here is a random team assignment if you would like to use it?`)\r\n        sendMessage(message, `:foos: _${playersInGame[0]}_ *&* _${playersInGame[1]}_`)\r\n        sendMessage(message, `:vs:`)\r\n        sendMessage(message, `:foos: _${playersInGame[2]}_ *&* _${playersInGame[3]}_`)\r\n        // Save the number of games played to the local db\r\n        playersInGame.forEach((username) => {\r\n          updateNumberOfGamesPlayed(username)\r\n        })\r\n      } else { sendMessage(message, `:no_good: too slow! :turtle:`) }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Challenge the winners of the current game\r\n * @param message\r\n * @param responseText\r\n */\r\nfunction challengeWinners (message, responseText) {\r\n  if (gameInProgress) {\r\n    if (numberOfSpots !== 0) {\r\n      sendMessage(message, 'There is still space in the current game. Please join that instead of trying to challenge.')\r\n    } else if (numberOfChallengeSpots === 0) {\r\n      sendMessage(message, 'Sorry, we already have 2 challengers')\r\n    } else {\r\n      numberOfChallengeSpots--\r\n      sendMessage(message, 'Ok great, you are in for the next game!')\r\n    }\r\n  } else {\r\n    sendMessage(message, 'Sorry there is no game in progress for you to challenge. Please be faster next time. The ability to challenge expires 30 seconds after the game is full')\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches the stats around number of games played, sorts it and returns it as a message\r\n * @param message\r\n * @param responseText\r\n */\r\nfunction showLeaderboard (message, responseText) {\r\n  controller.storage.users.all((error, allUserData) => {\r\n    if (error) {\r\n      console.log(error)\r\n    }\r\n    let leaderboardMessage = ''\r\n    let sortedUserArray = sortByKey(allUserData, 'numberOfGamesPlayed')\r\n    sortedUserArray.map((user, index) => {\r\n      leaderboardMessage += `${index + 1}) ${user.id} *${user.numberOfGamesPlayed}* \\n`\r\n    })\r\n    sendMessage(message, leaderboardMessage)\r\n  })\r\n}\r\n\r\n/**\r\n * Shuffles an array\r\n * @param array\r\n * @returns {*}\r\n */\r\nfunction shuffle (array) {\r\n  let currentIndex = array.length\r\n  let temporaryValue\r\n  let randomIndex\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex)\r\n    currentIndex -= 1\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex]\r\n    array[currentIndex] = array[randomIndex]\r\n    array[randomIndex] = temporaryValue\r\n  }\r\n\r\n  return array\r\n}\r\n\r\n/**\r\n * Saves the number of games played to a local db\r\n * @param username\r\n */\r\nfunction updateNumberOfGamesPlayed (username) {\r\n  controller.storage.users.get(username, function (error, userData) {\r\n    if (error) {\r\n      console.log(error)\r\n    }\r\n    if (userData) {\r\n      controller.storage.users.save({\r\n        id: username,\r\n        numberOfGamesPlayed: (parseInt(userData.numberOfGamesPlayed, 10) + 1).toString()\r\n      }, function (err) {\r\n        if (err) {\r\n          console.log(err, 'user data not saved')\r\n        }\r\n      })\r\n    } else {\r\n      controller.storage.users.save({id: username, numberOfGamesPlayed: 1}, function (err) {\r\n        if (err) {\r\n          console.log(err, 'user data not saved')\r\n        }\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Check if a string is in an array\r\n * @param string\r\n * @param array\r\n * @returns {boolean}\r\n */\r\nfunction arrayContains (string, array) {\r\n  return (array.indexOf(string) > -1)\r\n}\r\n\r\n/**\r\n * Sort array (leaderboard) by key\r\n * @param array\r\n * @param key\r\n * @returns {Array.<T>}\r\n */\r\nfunction sortByKey (array, key) {\r\n  return array.sort(function (a, b) {\r\n    let x = parseInt(a[key])\r\n    let y = parseInt(b[key])\r\n    return ((x > y) ? -1 : ((x < y) ? 1 : 0))\r\n  })\r\n}\r\n\r\nfunction runWebServer () {\r\n  const index = fs.readFileSync('index.html')\r\n\r\n  http.createServer(function (request, response) {\r\n    if (request.method === 'POST') {\r\n      processPost(request, response, function () {\r\n        console.log(request.post)\r\n        // Use request.post here\r\n        response.writeHead(200, 'OK', {'Content-Type': 'text/plain'})\r\n        response.end()\r\n      })\r\n    } else {\r\n      response.writeHead(200, 'OK', {'Content-Type': 'text/plain'})\r\n      response.end(index)\r\n    }\r\n  }).listen(9615)\r\n}\r\n\r\nfunction processPost (request, response, callback) {\r\n  let queryData = ''\r\n  if (typeof callback !== 'function') return null\r\n\r\n  if (request.method === 'POST') {\r\n    request.on('data', function (data) {\r\n      queryData += data\r\n      if (queryData.length > 1e6) {\r\n        queryData = ''\r\n        response.writeHead(413, {'Content-Type': 'text/plain'}).end()\r\n        request.connection.destroy()\r\n      }\r\n    })\r\n\r\n    request.on('end', function () {\r\n      request.post = querystring.parse(queryData)\r\n      callback()\r\n    })\r\n  } else {\r\n    response.writeHead(405, {'Content-Type': 'text/plain'})\r\n    response.end()\r\n  }\r\n}\r\n"]}