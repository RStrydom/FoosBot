{"version":3,"sources":["../index.js"],"names":["decoder","devConfig","process","env","DEVELOPMENT_CONFIG","apiaiOptions","hostname","DEVELOPMENT_HOST","path","apiAiService","sessionIds","Map","controller","slackbot","json_file_store","configureSlackApp","clientId","clientSecret","scopes","setupWebserver","err","webserver","createWebhookEndpoints","createOauthEndpoints","req","res","status","send","_bots","trackBot","bot","config","token","numberOfSpots","playersInGame","challengers","numberOfChallengeSpots","gameInProgress","edInsults","on","message","reply","api","users","info","user","error","response","name","arrayContains","updateNumberOfGamesPlayed","randomInsultIndex","Math","floor","random","length","actions","responseMessage","push","text","attachments","title","callback_id","attachment_type","color","shuffle","replyInteractive","startRTM","startPrivateConversation","createdBy","convo","say","storage","teams","all","Error","t","spawn","isDefined","obj","hears","type","identity","id","indexOf","requestText","decode","replace","channel","botId","userId","has","set","v1","request","textRequest","sessionId","get","contexts","parameters","slack_user_id","slack_channel","result","responseText","fulfillment","speech","responseData","data","action","startGame","showLeaderboard","slack","resp","end","allUserData","leaderboardMessage","sortedUserArray","sortByKey","map","index","numberOfGamesPlayed","array","currentIndex","temporaryValue","randomIndex","username","userData","save","parseInt","toString","string","key","sort","a","b","x","y"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\r\n\r\nimport apiai from 'apiai'\r\nimport Botkit from 'botkit'\r\nimport { XmlEntities as Entities } from 'html-entities'\r\nimport uuid from 'node-uuid'\r\nimport { apiAiAccessToken, slackAppClientId, slackAppClientSecret } from './secrets'\r\n\r\nconst decoder = new Entities()\r\n\r\nconst devConfig = process.env.DEVELOPMENT_CONFIG === 'true'\r\n\r\nconst apiaiOptions = {}\r\nif (devConfig) {\r\n  apiaiOptions.hostname = process.env.DEVELOPMENT_HOST\r\n  apiaiOptions.path = '/api/query'\r\n}\r\n\r\nconst apiAiService = apiai(apiAiAccessToken, apiaiOptions)\r\n\r\nconst sessionIds = new Map()\r\n\r\nconst controller = Botkit.slackbot({\r\n  json_file_store: './slackbot_storage'\r\n}).configureSlackApp(\r\n  {\r\n    clientId: slackAppClientId,\r\n    clientSecret: slackAppClientSecret,\r\n    scopes: ['bot']\r\n  }\r\n)\r\n\r\ncontroller.setupWebserver(3000, function (err, webserver) {\r\n  controller.createWebhookEndpoints(controller.webserver)\r\n  controller.createOauthEndpoints(controller.webserver, function (err, req, res) {\r\n    if (err) {\r\n      res.status(500).send('ERROR: ' + err)\r\n    } else {\r\n      res.send('Success!')\r\n    }\r\n  })\r\n})\r\n\r\n// just a simple way to make sure we don't\r\n// connect to the RTM twice for the same team\r\nlet _bots = {}\r\n\r\nfunction trackBot (bot) {\r\n  _bots[bot.config.token] = bot\r\n}\r\n\r\n// Game variables\r\nlet numberOfSpots = 4\r\nlet playersInGame = []\r\nlet challengers = []\r\nlet numberOfChallengeSpots = 2\r\nlet gameInProgress = false\r\nlet edInsults = [\r\n  '@edwardvincent Are you sure that is wise? :flushed:',\r\n  '@edwardvincent Are you sure? :flushed:',\r\n  '@edwardvincent Really?!! :flushed:',\r\n  '@edwardvincent When will you learn? :flushed:',\r\n  '@edwardvincent It just makes me sad :cry:'\r\n]\r\n\r\ncontroller.on('interactive_message_callback', function (bot, message) {\r\n  let reply\r\n  bot.api.users.info({user: message.user}, (error, response) => {\r\n    let {name} = response.user\r\n    if (arrayContains(name, playersInGame) && false) {\r\n      bot.reply(message, `@${name} You are already in the game. You can't join twice. :no_entry_sign:`)\r\n    } else {\r\n      updateNumberOfGamesPlayed(name)\r\n      if (name === 'edwardvincent') {\r\n        let randomInsultIndex = Math.floor(Math.random() * edInsults.length)\r\n        bot.reply(message, edInsults[randomInsultIndex])\r\n      }\r\n\r\n      if (message.actions[0].name === 'join') {\r\n        let responseMessage = ''\r\n\r\n        numberOfSpots--\r\n        playersInGame.push(name)\r\n        if (numberOfSpots > 1) {\r\n          responseMessage = `${numberOfSpots} more spots to go... :timer_clock: @${name} - joined`\r\n        } else if (numberOfSpots === 1) {\r\n          responseMessage = `${numberOfSpots} more spot to go! Ahhhhh!!! :scream_cat: @${name} - joined`\r\n        } else {\r\n          responseMessage = `:no_good: too slow! :turtle:`\r\n        }\r\n\r\n        reply = {\r\n          text: responseMessage,\r\n          attachments: [{\r\n            title: 'Click to join while there is space!',\r\n            callback_id: message.user,\r\n            attachment_type: 'default',\r\n            color: '#09b600',\r\n            actions: [{\r\n              'name': 'join',\r\n              'style': 'primary',\r\n              'text': ':tada: Join',\r\n              'value': '1',\r\n              'type': 'button'\r\n            }]\r\n          }, {\r\n            title: 'Players in the game:',\r\n            text: `${playersInGame[0]} ${playersInGame[1]} ${playersInGame[2] ? playersInGame[2] : ''}`,\r\n            color: '#4942ff'\r\n          }]\r\n        }\r\n\r\n        if (numberOfSpots === 0) {\r\n          shuffle(playersInGame)\r\n          reply = {\r\n            text: 'Awesome! All spots are filled! :+1:',\r\n            attachments: [{\r\n              title: 'Who won?',\r\n              text: `:foos: Black: @${playersInGame[0]} & @${playersInGame[1]}\\n\r\n              :vs:\\n\r\n              :foos: White: @${playersInGame[2]} & @${playersInGame[3]}`,\r\n              callback_id: message.user,\r\n              attachment_type: 'default',\r\n              color: '#09b600',\r\n              actions: [{\r\n                'name': 'black_won',\r\n                'style': 'primary',\r\n                'text': 'Black won',\r\n                'value': '1',\r\n                'type': 'button'\r\n              }, {\r\n                'name': 'white_won',\r\n                'style': 'primary',\r\n                'text': 'White won',\r\n                'value': '1',\r\n                'type': 'button'\r\n              }, {\r\n                'name': 'challenge',\r\n                'style': 'primary',\r\n                'text': `Challenge`,\r\n                'value': '1',\r\n                'type': 'button'\r\n              }]\r\n            }]\r\n          }\r\n        }\r\n      } else if (message.actions[0].name === 'black_won' || message.actions[0].name === 'white_won') {\r\n        // TODO increment the winner count\r\n        gameInProgress = false\r\n        playersInGame = []\r\n        reply = {\r\n          text: 'Congrats',\r\n          attachments: []\r\n        }\r\n      } else {\r\n        numberOfChallengeSpots--\r\n        challengers.push(name)\r\n        reply = {\r\n          text: `Challenge  @${name} - challenged`,\r\n          attachments: [{\r\n            title: 'Who won?',\r\n            text: `Here is a random team assignment if you would like to use it?\\n\r\n          :foos: Black: @${playersInGame[0]} & @${playersInGame[1]}\\n\r\n          :vs:\\n\r\n          :foos: White: @${playersInGame[2]} & @${playersInGame[3]}`,\r\n            callback_id: message.user,\r\n            attachment_type: 'default',\r\n            color: '#09b600',\r\n            actions: [{\r\n              'name': 'join',\r\n              'style': 'primary',\r\n              'text': 'Black won',\r\n              'value': '1',\r\n              'type': 'button'\r\n            }, {\r\n              'name': 'join',\r\n              'style': 'primary',\r\n              'text': 'White won',\r\n              'value': '1',\r\n              'type': 'button'\r\n            }, {\r\n              'name': 'challenge',\r\n              'style': 'primary',\r\n              'text': `Challenge`,\r\n              'value': '2',\r\n              'type': 'button'\r\n            }]\r\n          }]\r\n        }\r\n      }\r\n\r\n      bot.replyInteractive(message, reply)\r\n    }\r\n  })\r\n})\r\n\r\ncontroller.on('create_bot', function (bot, config) {\r\n\r\n  if (_bots[bot.config.token]) {\r\n    // already online! do nothing.\r\n  } else {\r\n    bot.startRTM(function (err) {\r\n      if (!err) {\r\n        trackBot(bot)\r\n      }\r\n\r\n      bot.startPrivateConversation({user: config.createdBy}, function (err, convo) {\r\n        if (err) {\r\n          console.log(err)\r\n        } else {\r\n          convo.say('I am a bot that has just joined your team')\r\n          convo.say('You must now /invite me to a channel so that I can be of use!')\r\n        }\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Handle events related to the websocket connection to Slack\r\ncontroller.on('rtm_open', function (bot) {\r\n  console.log('** The RTM api just connected!')\r\n})\r\n\r\ncontroller.on('rtm_close', function (bot) {\r\n  console.log('** The RTM api just closed')\r\n  // you may want to attempt to re-open\r\n})\r\n\r\ncontroller.storage.teams.all(function (err, teams) {\r\n\r\n  if (err) {\r\n    throw new Error(err)\r\n  }\r\n\r\n  // connect all teams with bots up to slack!\r\n  for (let t in teams) {\r\n    if (teams[t].bot) {\r\n      controller.spawn(teams[t]).startRTM(function (err, bot) {\r\n        if (err) {\r\n          console.log('Error connecting bot to Slack:', err)\r\n        } else {\r\n          trackBot(bot)\r\n        }\r\n      })\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * Check if defined pollyfil\r\n * @param obj\r\n * @returns {boolean}\r\n */\r\nfunction isDefined (obj) {\r\n  if (typeof obj === 'undefined') {\r\n    return false\r\n  }\r\n\r\n  if (!obj) {\r\n    return false\r\n  }\r\n\r\n  return obj !== null\r\n}\r\n\r\n/**\r\n * Listen for direction messages and all mentions @foos-bot\r\n * Fire off the correct functions based on the type of request that was made\r\n */\r\ncontroller.hears(['.*'], ['direct_message', 'direct_mention', 'mention'], (bot, message) => {\r\n  try {\r\n    if (message.type === 'message') {\r\n      if (message.user === bot.identity.id) {\r\n        // message from bot can be skipped\r\n      } else if (message.text.indexOf('<@U') === 0 && message.text.indexOf(bot.identity.id) === -1) {\r\n        // skip other users direct mentions\r\n      } else {\r\n        let requestText = decoder.decode(message.text)\r\n        requestText = requestText.replace('’', '\\'')\r\n\r\n        let channel = message.channel\r\n        let botId = '<@' + bot.identity.id + '>'\r\n        let userId = message.user\r\n\r\n        if (requestText.indexOf(botId) > -1) {\r\n          requestText = requestText.replace(botId, '')\r\n        }\r\n\r\n        if (!sessionIds.has(channel)) {\r\n          sessionIds.set(channel, uuid.v1())\r\n        }\r\n\r\n        let request = apiAiService.textRequest(requestText,\r\n          {\r\n            sessionId: sessionIds.get(channel),\r\n            contexts: [\r\n              {\r\n                name: 'generic',\r\n                parameters: {\r\n                  slack_user_id: userId,\r\n                  slack_channel: channel\r\n                }\r\n              }\r\n            ]\r\n          })\r\n\r\n        request.on('response', (response) => {\r\n          if (isDefined(response.result)) {\r\n            let responseText = response.result.fulfillment.speech\r\n            let responseData = response.result.fulfillment.data\r\n            let action = response.result.action\r\n\r\n            if (action === 'start_game' || action === 'join_game') {\r\n              // start a new game if there isn't one in progress\r\n              if (!gameInProgress) {\r\n                startGame(bot, message)\r\n              } else { // Join the current game if there is one in progress\r\n                bot.reply(message, 'There is already a game in progress -  please join that one')\r\n              }\r\n            } else if (action === 'show_leaderboard') { // show who has played the most games\r\n              showLeaderboard(bot, message, responseText)\r\n            } else if (action === 'check_number_of_players_in_game') { // check the number of spots remaining\r\n              if (!gameInProgress) {\r\n                bot.reply(message, 'There is no game in progress - so 4 spots')\r\n              } else {\r\n                bot.reply(message, 'There are ' + numberOfSpots + ' remaining...')\r\n              }\r\n            } else if (action === 'get_help') {\r\n              bot.reply(message, responseText)\r\n            } else if (isDefined(responseData) && isDefined(responseData.slack)) {\r\n              try {\r\n                bot.reply(message, responseData.slack)\r\n              } catch (err) {\r\n                bot.reply(err.message)\r\n              }\r\n            } else if (isDefined(responseText)) {\r\n              bot.reply(responseText, (err, resp) => {\r\n                if (err) {\r\n                  console.error(err)\r\n                }\r\n              })\r\n            }\r\n          }\r\n        })\r\n\r\n        request.on('error', (error) => console.error(error))\r\n        request.end()\r\n      }\r\n    }\r\n  } catch\r\n    (err) {\r\n    console.error(err)\r\n  }\r\n})\r\n\r\n/**\r\n * Starts a new game\r\n * @param message\r\n */\r\nfunction startGame (bot, message) {\r\n  gameInProgress = true\r\n  numberOfSpots = 3\r\n  numberOfChallengeSpots = 2\r\n  playersInGame = []\r\n  challengers = []\r\n\r\n  bot.api.users.info({user: message.user}, (error, response) => {\r\n    let reply = {\r\n      text: `New game created by  @${response.user.name} :tada:`,\r\n      attachments: [{\r\n        title: 'Click to join while there is space!',\r\n        callback_id: message.user,\r\n        attachment_type: 'default',\r\n        color: '#09b600',\r\n        actions: [\r\n          {\r\n            'name': 'join',\r\n            'style': 'primary',\r\n            'text': ':tada: Join',\r\n            'value': '1',\r\n            'type': 'button'\r\n          }\r\n        ]\r\n      }]\r\n    }\r\n\r\n    bot.reply(message, reply)\r\n\r\n    // Add the person who sent the message to the game\r\n    playersInGame.push(response.user.name)\r\n    updateNumberOfGamesPlayed(response.user.name)\r\n  })\r\n}\r\n\r\n/**\r\n * Fetches the stats around number of games played, sorts it and returns it as a message\r\n * @param message\r\n * @param responseText\r\n */\r\nfunction showLeaderboard (bot, message) {\r\n  controller.storage.users.all((error, allUserData) => {\r\n    if (error) {\r\n      console.log(error)\r\n    }\r\n    let leaderboardMessage = ''\r\n    let sortedUserArray = sortByKey(allUserData, 'numberOfGamesPlayed')\r\n    sortedUserArray.map((user, index) => {\r\n      leaderboardMessage += `${index + 1}) ${user.id} *${user.numberOfGamesPlayed}* \\n`\r\n    })\r\n    bot.reply(message, leaderboardMessage)\r\n  })\r\n}\r\n\r\n/**\r\n * Shuffles an array\r\n * @param array\r\n * @returns {*}\r\n */\r\nfunction shuffle (array) {\r\n  let currentIndex = array.length\r\n  let temporaryValue\r\n  let randomIndex\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex)\r\n    currentIndex -= 1\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex]\r\n    array[currentIndex] = array[randomIndex]\r\n    array[randomIndex] = temporaryValue\r\n  }\r\n\r\n  return array\r\n}\r\n\r\n/**\r\n * Saves the number of games played to a local db\r\n * @param username\r\n */\r\nfunction updateNumberOfGamesPlayed (username) {\r\n  controller.storage.users.get(username, function (error, userData) {\r\n    if (error) {\r\n      console.log(error)\r\n    }\r\n    if (userData) {\r\n      controller.storage.users.save({\r\n        id: username,\r\n        numberOfGamesPlayed: (parseInt(userData.numberOfGamesPlayed, 10) + 1).toString()\r\n      }, function (err) {\r\n        if (err) {\r\n          console.log(err, 'user data not saved')\r\n        }\r\n      })\r\n    } else {\r\n      controller.storage.users.save({id: username, numberOfGamesPlayed: 1}, function (err) {\r\n        if (err) {\r\n          console.log(err, 'user data not saved')\r\n        }\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Check if a string is in an array\r\n * @param string\r\n * @param array\r\n * @returns {boolean}\r\n */\r\nfunction arrayContains (string, array) {\r\n  return (array.indexOf(string) > -1)\r\n}\r\n\r\n/**\r\n * Sort array (leaderboard) by key\r\n * @param array\r\n * @param key\r\n * @returns {Array.<T>}\r\n */\r\nfunction sortByKey (array, key) {\r\n  return array.sort(function (a, b) {\r\n    let x = parseInt(a[key])\r\n    let y = parseInt(b[key])\r\n    return ((x > y) ? -1 : ((x < y) ? 1 : 0))\r\n  })\r\n}\r\n"]}